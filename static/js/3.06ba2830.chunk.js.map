{"version":3,"sources":["Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/profileStatus/ProfileStatus.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/profileStatus/ProfileStatus.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","status","setStatus","editMode","setEditMode","useEffect","className","styles","statusSpan","onDoubleClick","statusInput","onChange","e","updateStatus","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileInfo","profile","src","alt","s","descriptionBlock","photos","large","userPhoto","style","height","width","fullName","contacts","vk","lookingForAJob","Preloader","Post","item","message","MyPosts","React","memo","postsElements","posts","map","p","likesCount","key","id","containerPosts","PostReduxForm","onSubmit","addPost","post","maxLength100","naxLength","reduxForm","form","handleSubmit","createField","requiredField","Textarea","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserID","history","push","getUserProfileThunkCreator","getUserStatus","Component","compose","WithAuthRedirect","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.06ba2830.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aUQeI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusSpan\":\"ProfileStatus_statusSpan__2QCw8\",\"statusInput\":\"ProfileStatus_statusInput__3qzaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerPosts\":\"MyPosts_containerPosts__FDAGV\",\"posts\":\"MyPosts_posts__1pPDb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ppke\"};","import React, {useEffect, useState} from 'react';\r\nimport styles from './ProfileStatus.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    let [status, setStatus] = useState(props.status);\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const updateStatus = (status: string) => {\r\n        setStatus(status)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span className={styles.statusSpan}\r\n                      onDoubleClick={activateEditMode}>status: {status}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input className={styles.statusInput}\r\n                       onChange={(e) => updateStatus(e.currentTarget.value)}\r\n                       autoFocus\r\n                       onBlur={deActivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>)\r\n\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"../../profileStatus/ProfileStatus\";\r\nimport userPhoto from \"../../../../assecs/images/user.png\"\r\nimport {profileType} from \"../../../../Redux/profile-reducer\";\r\n\r\ntype profileInfoPropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: profileInfoPropsType) => {\r\n    if(!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src='https://jssors8.azureedge.net/demos/image-slider/img/px-beach-daylight-fun-1430675-image.jpg' alt={\"background\"}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large ? props.profile.photos.large : userPhoto} style={{height: \"300px\", width: \"300px\"}} alt={\"avatar\"}/>\r\n                {props.profile.fullName}\r\n               <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                {props.profile.contacts.vk}\r\n                {props.profile.lookingForAJob}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://www.nj.com/resizer/h8MrN0-Nw5dB5FOmMVGMmfVKFJo=/450x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg'/>\r\n            {props.message}\r\n            <div>\r\n            <span>\r\n                Like\r\n            </span>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {postsType} from \"../../../Redux/profile-reducer\";\r\nimport {naxLength, requiredField} from \"../../../utils/validators/Validators\";\r\nimport {createField, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype myPostsPropsType = {\r\n    addPost: (value: string) => void\r\n    posts: Array<postsType>\r\n}\r\ntype postFormDataType = {\r\n    post: string\r\n}\r\n\r\nexport const MyPosts: React.FC<myPostsPropsType> = React.memo((props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>)\r\n    const addPost = (value: postFormDataType) => {\r\n        props.addPost(value.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.containerPosts}>\r\n            <h2>My posts</h2>\r\n            <div>\r\n                <PostReduxForm onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<postFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField(\"Post message\", \"post\", [requiredField, maxLength100], Textarea)}\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst maxLength100 = naxLength(100)\r\nconst PostReduxForm = reduxForm<postFormDataType>({form: \"post\"}) (AddPostForm)\r\n\r\n","import {ActionsTypes, addPostActionCreator} from '../../../Redux/profile-reducer';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../Redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\r\n    return {\r\n        addPost: (value: string) => {\r\n            dispatch(addPostActionCreator(value))\r\n        }\r\n    }\r\n}\r\n\r\n const  MyPostsContainer = connect (mapStateToProps, mapDispatchToProps)  (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './MyPosts/ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {profileType} from \"../../Redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfileThunkCreator, getUserStatus, profileType, updateUserStatus} from \"../../Redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & PropsType\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: profileType,\r\n    status: string\r\n    authorizedUserID: string\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunkCreator: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (tatus: string) => void\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserID;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile  {...this.props}\r\n                      profile={this.props.profile}\r\n                      status={this.props.status}\r\n                      updateUserStatus={this.props.updateUserStatus}/>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserID: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {getUserProfileThunkCreator, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n"],"sourceRoot":""}