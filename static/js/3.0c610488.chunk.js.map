{"version":3,"sources":["Components/Profile/MyPosts/ProfileInfo/ProfileInfo.module.css","Components/Profile/profileStatus/ProfileStatus.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/profileStatus/ProfileStatus.tsx","Components/Profile/MyPosts/ProfileInfo/PofileDataForm.tsx","Components/Profile/MyPosts/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatus","props","useState","status","setStatus","editMode","setEditMode","useEffect","className","styles","statusSpan","onDoubleClick","statusInput","onChange","e","updateStatus","currentTarget","value","autoFocus","onBlur","updateUserStatus","ProfileDataFormReduxForm","reduxForm","form","profile","handleSubmit","error","onSubmit","formSummaryError","createField","Input","lookingForAJob","lookingForAJobDescription","Textarea","aboutMe","Object","keys","contacts","map","key","s","ProfileData","isOwner","goToEditMode","onClick","fullName","contactTitle","contactValue","Contact","ProfileInfo","Preloader","src","alt","descriptionBlock","photos","large","userPhoto","style","height","width","type","target","files","savePhoto","initialValues","formData","saveProfile","then","Post","item","message","MyPosts","React","memo","postsElements","posts","p","likesCount","id","containerPosts","PostReduxForm","addPost","post","maxLength100","naxLength","requiredField","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserID","history","push","getUserProfileThunkCreator","getUserStatus","refreshProfile","prevProps","prevState","snapshot","Component","compose","WithAuthRedirect","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.0c610488.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__aUQeI\",\"contacts\":\"ProfileInfo_contacts__IAjj3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statusSpan\":\"ProfileStatus_statusSpan__2QCw8\",\"statusInput\":\"ProfileStatus_statusInput__3qzaB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerPosts\":\"MyPosts_containerPosts__FDAGV\",\"posts\":\"MyPosts_posts__1pPDb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3ppke\"};","import React, {useEffect, useState} from 'react';\r\nimport styles from './ProfileStatus.module.css'\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    let [status, setStatus] = useState(props.status);\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const updateStatus = (status: string) => {\r\n        setStatus(status)\r\n    }\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deActivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span className={styles.statusSpan}\r\n                      onDoubleClick={activateEditMode}><b>status: </b>{status}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div>\r\n                <input className={styles.statusInput}\r\n                       onChange={(e) => updateStatus(e.currentTarget.value)}\r\n                       autoFocus\r\n                       onBlur={deActivateEditMode}\r\n                       value={status}\r\n                />\r\n            </div>\r\n            }\r\n        </div>)\r\n\r\n}","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {profileType} from \"../../../../Redux/profile-reducer\";\r\nimport {createField, Input, Textarea} from \"../../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport styles from \"../../../../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: profileType\r\n}\r\n\r\ntype formDataType = {\r\n    fullName: string\r\n    professionalSkills: string\r\n    aboutMe: string\r\n}\r\n\r\n const ProfileDataForm: React.FC<InjectedFormProps<profileType, PropsType> & PropsType> = ({profile, handleSubmit, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><button>save</button></div>\r\n            {error && <div className={styles.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <b>Full name</b>: {createField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n                {createField(\"\", \"lookingForAJob\", [], Input, \"checkbox\")}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                {createField(\"professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n                {createField(\"about me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={s.contacts}>\r\n                    <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                </div>\r\n            })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<profileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../../common/preloader/Preloader\";\r\nimport {ProfileStatus} from \"../../profileStatus/ProfileStatus\";\r\nimport userPhoto from \"../../../../assecs/images/user.png\"\r\nimport {profileType} from \"../../../../Redux/profile-reducer\";\r\nimport ProfileDataForm from \"./PofileDataForm\"\r\n\r\ntype profileInfoPropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: profileType) => void\r\n}\r\n\r\nconst ProfileInfo = (props: profileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: profileType) => {\r\n        // @ts-ignore\r\n        props.saveProfile(formData).then(\r\n            () => {setEditMode(false)})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img src='https://jssors8.azureedge.net/demos/image-slider/img/px-beach-daylight-fun-1430675-image.jpg'\r\n                     alt={\"background\"}/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <img src={props.profile.photos.large || userPhoto} style={{height: \"300px\", width: \"300px\"}}\r\n                     alt={\"avatar\"}/>\r\n                {props.isOwner && <div>Update photo<input type=\"file\" onChange={onMainPhotoSelected}/></div>}\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.isOwner} goToEditMode={() => {setEditMode(true)}}/>}\r\n                <ProfileStatus status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: profileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\r\n    return (\r\n        <div>\r\n            {isOwner && <div><button onClick={goToEditMode}>edit</button></div>}\r\n            <div>\r\n                <b>Full name</b>: {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            {profile.lookingForAJob && <div>\r\n                <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n            </div>}\r\n            <div>\r\n                <b>About me</b>: {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\r\n            })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nconst Contact = ({contactTitle, contactValue}: ContactPropsType) => {\r\n    return <div className={s.contacts}><b>{contactTitle}:</b> {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post: React.FC<PostType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://www.nj.com/resizer/h8MrN0-Nw5dB5FOmMVGMmfVKFJo=/450x0/smart/cloudfront-us-east-1.images.arcpublishing.com/advancelocal/SJGKVE5UNVESVCW7BBOHKQCZVE.jpg'/>\r\n            {props.message}\r\n            <div>\r\n            <span>\r\n                Like\r\n            </span>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {postsType} from \"../../../Redux/profile-reducer\";\r\nimport {naxLength, requiredField} from \"../../../utils/validators/Validators\";\r\nimport {createField, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\n\r\ntype myPostsPropsType = {\r\n    addPost: (value: string) => void\r\n    posts: Array<postsType>\r\n}\r\ntype postFormDataType = {\r\n    post: string\r\n}\r\n\r\nexport const MyPosts: React.FC<myPostsPropsType> = React.memo((props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount} key={p.id}/>)\r\n    const addPost = (value: postFormDataType) => {\r\n        props.addPost(value.post)\r\n    }\r\n\r\n    return (\r\n        <div className={s.containerPosts}>\r\n            <h2>My posts</h2>\r\n            <div>\r\n                <PostReduxForm onSubmit={addPost}/>\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<postFormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField(\"Post message\", \"post\", [requiredField, maxLength100], Textarea)}\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst maxLength100 = naxLength(100)\r\nconst PostReduxForm = reduxForm<postFormDataType>({form: \"post\"}) (AddPostForm)\r\n\r\n","import {ActionsTypes, addPostActionCreator} from '../../../Redux/profile-reducer';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../Redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\r\n    return {\r\n        addPost: (value: string) => {\r\n            dispatch(addPostActionCreator(value))\r\n        }\r\n    }\r\n}\r\n\r\n const  MyPostsContainer = connect (mapStateToProps, mapDispatchToProps)  (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './MyPosts/ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport {profileType} from \"../../Redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: profileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: profileType) => void\r\n}\r\n\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                saveProfile={props.saveProfile}\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    getUserStatus,\r\n    profileType,\r\n    savePhoto, saveProfile,\r\n    updateUserStatus\r\n} from \"../../Redux/profile-reducer\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {RootStateType} from \"../../Redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype CommonPropsType = RouteComponentProps<PathParamsType> & PropsType\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\ntype MapStatePropsType = {\r\n    profile: profileType,\r\n    status: string\r\n    authorizedUserID: string\r\n    isAuth: boolean\r\n\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfileThunkCreator: (userId: string) => void\r\n    getUserStatus: (userId: string) => void\r\n    updateUserStatus: (tatus: string) => void\r\n    savePhoto: (photo: File) => void\r\n    saveProfile: (profile: profileType) => void\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component<CommonPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserID;\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<CommonPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Profile  {...this.props}\r\n                      isOwner={!this.props.match.params.userId}\r\n                      profile={this.props.profile}\r\n                      status={this.props.status}\r\n                      updateUserStatus={this.props.updateUserStatus}\r\n                      savePhoto={this.props.savePhoto}\r\n                      saveProfile={this.props.saveProfile}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserID: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    WithAuthRedirect,\r\n    connect(mapStateToProps, {getUserProfileThunkCreator, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n)(ProfileContainer)\r\n\r\n\r\n\r\n"],"sourceRoot":""}